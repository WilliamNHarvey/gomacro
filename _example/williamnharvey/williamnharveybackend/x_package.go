// this file was generated by gomacro command: import _i "/Users/williamnharvey/workspace/gomacro/_example/williamnharvey/williamnharveybackend"
// DO NOT EDIT! Any change will be lost when the file is re-generated

package williamnharveybackend

import (
	r "reflect"
)


/**
 * Declare and fill a global variable Packages, whose type is compatible
 * with the global variable github.com/WilliamNHarvey/gomacro/imports.Packages
 *
 * If you want to automatically register this package's declarations into
 *   github.com/WilliamNHarvey/gomacro/imports.Packages
 * to let gomacro know about this package, and allow importing it without compiling
 * a plugin, you can add the following to some _other_ file in this directory:
 *
 * import "github.com/WilliamNHarvey/gomacro/imports"
 *
 * func init() {
 *     for k, v := range Packages {
 *         imports.Packages[k] = v
 *     }
 * }
 *
 * Such code is _not_ automatically added to this file, because it would introduce
 * a dependency on gomacro packages, which may be undesiderable.
 */

type Package = struct {
	Name     string
	Binds    map[string]r.Value
	Types    map[string]r.Type
	Proxies  map[string]r.Type
	Untypeds map[string]string
	Wrappers map[string][]string
}

var Packages = make(map[string]Package)

// reflection: allow interpreted code to import "github.com/WilliamNHarvey/gomacro/_example/williamnharvey/williamnharveybackend"
func init() {
	Packages["github.com/WilliamNHarvey/gomacro/_example/williamnharvey/williamnharveybackend"] = Package{
		Name: "williamnharveybackend",
		Types: map[string]r.Type{
			"InteractableBackend":	r.TypeOf((*InteractableBackend)(nil)).Elem(),
		}, 
	}
}
